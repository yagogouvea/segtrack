
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClienteScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  cnpj: 'cnpj',
  contato: 'contato',
  telefone: 'telefone',
  email: 'email',
  endereco: 'endereco',
  bairro: 'bairro',
  cidade: 'cidade',
  estado: 'estado',
  cep: 'cep',
  logo: 'logo',
  nome_fantasia: 'nome_fantasia'
};

exports.Prisma.CampoAdicionalClienteScalarFieldEnum = {
  id: 'id',
  clienteId: 'clienteId',
  label: 'label',
  campo: 'campo'
};

exports.Prisma.ContratoScalarFieldEnum = {
  id: 'id',
  clienteId: 'clienteId',
  nome_interno: 'nome_interno',
  tipo: 'tipo',
  regiao: 'regiao',
  valor_acionamento: 'valor_acionamento',
  valor_nao_recuperado: 'valor_nao_recuperado',
  valor_hora_extra: 'valor_hora_extra',
  valor_km_extra: 'valor_km_extra',
  franquia_horas: 'franquia_horas',
  franquia_km: 'franquia_km',
  valor_km: 'valor_km',
  valor_base: 'valor_base',
  permite_negociacao: 'permite_negociacao'
};

exports.Prisma.PrestadorScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  cpf: 'cpf',
  cod_nome: 'cod_nome',
  telefone: 'telefone',
  email: 'email',
  aprovado: 'aprovado',
  tipo_pix: 'tipo_pix',
  chave_pix: 'chave_pix',
  cep: 'cep',
  endereco: 'endereco',
  bairro: 'bairro',
  cidade: 'cidade',
  estado: 'estado',
  valor_acionamento: 'valor_acionamento',
  franquia_horas: 'franquia_horas',
  franquia_km: 'franquia_km',
  valor_hora_adc: 'valor_hora_adc',
  valor_km_adc: 'valor_km_adc',
  criado_em: 'criado_em',
  origem: 'origem',
  modelo_antena: 'modelo_antena'
};

exports.Prisma.FuncaoPrestadorScalarFieldEnum = {
  id: 'id',
  funcao: 'funcao',
  prestadorId: 'prestadorId'
};

exports.Prisma.RegiaoPrestadorScalarFieldEnum = {
  id: 'id',
  regiao: 'regiao',
  prestadorId: 'prestadorId'
};

exports.Prisma.TipoVeiculoPrestadorScalarFieldEnum = {
  id: 'id',
  tipo: 'tipo',
  prestadorId: 'prestadorId'
};

exports.Prisma.VeiculoScalarFieldEnum = {
  id: 'id',
  placa: 'placa',
  modelo: 'modelo',
  marca: 'marca',
  cor: 'cor',
  fabricante: 'fabricante',
  ano: 'ano',
  createdAt: 'createdAt'
};

exports.Prisma.OcorrenciaScalarFieldEnum = {
  id: 'id',
  placa1: 'placa1',
  placa2: 'placa2',
  placa3: 'placa3',
  modelo1: 'modelo1',
  cor1: 'cor1',
  cliente: 'cliente',
  tipo: 'tipo',
  tipo_veiculo: 'tipo_veiculo',
  coordenadas: 'coordenadas',
  endereco: 'endereco',
  bairro: 'bairro',
  cidade: 'cidade',
  estado: 'estado',
  cpf_condutor: 'cpf_condutor',
  nome_condutor: 'nome_condutor',
  transportadora: 'transportadora',
  valor_carga: 'valor_carga',
  notas_fiscais: 'notas_fiscais',
  os: 'os',
  origem_bairro: 'origem_bairro',
  origem_cidade: 'origem_cidade',
  origem_estado: 'origem_estado',
  prestador: 'prestador',
  operador: 'operador',
  inicio: 'inicio',
  chegada: 'chegada',
  termino: 'termino',
  km: 'km',
  despesas: 'despesas',
  descricao: 'descricao',
  resultado: 'resultado',
  status: 'status',
  encerrada_em: 'encerrada_em',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em',
  data_acionamento: 'data_acionamento',
  km_final: 'km_final',
  km_inicial: 'km_inicial',
  despesas_detalhadas: 'despesas_detalhadas',
  passagem_servico: 'passagem_servico',
  planta_origem: 'planta_origem',
  cidade_destino: 'cidade_destino',
  km_acl: 'km_acl'
};

exports.Prisma.FotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  legenda: 'legenda',
  cropX: 'cropX',
  cropY: 'cropY',
  zoom: 'zoom',
  cropArea: 'cropArea',
  ocorrenciaId: 'ocorrenciaId',
  createdAt: 'createdAt'
};

exports.Prisma.RelatorioScalarFieldEnum = {
  id: 'id',
  ocorrenciaId: 'ocorrenciaId',
  cliente: 'cliente',
  tipo: 'tipo',
  dataAcionamento: 'dataAcionamento',
  caminhoPdf: 'caminhoPdf',
  criadoEm: 'criadoEm'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  permissions: 'permissions',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.TipoContrato = exports.$Enums.TipoContrato = {
  padrao_regiao: 'padrao_regiao',
  acl_km: 'acl_km',
  padrao_fixo: 'padrao_fixo',
  valor_fechado: 'valor_fechado'
};

exports.RegiaoContrato = exports.$Enums.RegiaoContrato = {
  CAPITAL: 'CAPITAL',
  GRANDE_SP: 'GRANDE_SP',
  INTERIOR: 'INTERIOR',
  OUTROS_ESTADOS: 'OUTROS_ESTADOS'
};

exports.OcorrenciaStatus = exports.$Enums.OcorrenciaStatus = {
  em_andamento: 'em_andamento',
  concluida: 'concluida',
  cancelada: 'cancelada',
  aguardando: 'aguardando'
};

exports.UserRole = exports.$Enums.UserRole = {
  admin: 'admin',
  manager: 'manager',
  operator: 'operator',
  client: 'client'
};

exports.Prisma.ModelName = {
  Cliente: 'Cliente',
  CampoAdicionalCliente: 'CampoAdicionalCliente',
  Contrato: 'Contrato',
  Prestador: 'Prestador',
  FuncaoPrestador: 'FuncaoPrestador',
  RegiaoPrestador: 'RegiaoPrestador',
  TipoVeiculoPrestador: 'TipoVeiculoPrestador',
  Veiculo: 'Veiculo',
  Ocorrencia: 'Ocorrencia',
  Foto: 'Foto',
  Relatorio: 'Relatorio',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
