generator client {
  provider = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoContrato {
  padrao_regiao
  acl_km
  padrao_fixo
  valor_fechado
}

enum RegiaoContrato {
  CAPITAL
  GRANDE_SP
  INTERIOR
  OUTROS_ESTADOS
}

enum UserRole {
  admin
  manager
  operator
  client
}

enum OcorrenciaStatus {
  em_andamento
  concluida
  cancelada
  aguardando
}

model Cliente {
  id               Int                     @id @default(autoincrement())
  nome             String
  cnpj             String
  contato          String?
  telefone         String?
  email            String?
  endereco         String?
  bairro           String?
  cidade           String?
  estado           String?
  cep              String?
  logo             String?                 // URL do logo do cliente
  camposAdicionais CampoAdicionalCliente[]
  contratos        Contrato[]
  nome_fantasia    String? @db.VarChar(255)
  
  // Relação com a nova tabela de autenticação
  auth             ClienteAuth?
}

// Nova tabela para autenticação de clientes
model ClienteAuth {
  id                Int      @id @default(autoincrement())
  cliente_id        Int      @unique // Relação 1:1 com Cliente
  cnpj_normalizado  String   @unique // CNPJ apenas com números
  senha_hash        String   // Hash da senha
  ativo             Boolean  @default(true)
  criado_em         DateTime @default(now())
  atualizado_em     DateTime @updatedAt
  
  // Relação com Cliente
  cliente           Cliente  @relation(fields: [cliente_id], references: [id], onDelete: Cascade)
  
  @@index([cnpj_normalizado])
  @@index([ativo])
}

model CampoAdicionalCliente {
  id        Int     @id @default(autoincrement())
  clienteId Int
  label     String
  campo     String
  cliente   Cliente @relation(fields: [clienteId], references: [id], map: "fk_campo_adicional_cliente")

  @@index([clienteId])
}

model Contrato {
  id                   Int      @id @default(autoincrement())
  clienteId            Int
  nome_interno         String?
  tipo                 TipoContrato?
  regiao               RegiaoContrato?
  valor_acionamento    Decimal? @db.Decimal(10, 2)
  valor_nao_recuperado Decimal? @db.Decimal(10, 2)
  valor_hora_extra     Decimal? @db.Decimal(10, 2)
  valor_km_extra       Decimal? @db.Decimal(10, 2)
  franquia_horas       String?
  franquia_km          Int?
  valor_km            Decimal? @db.Decimal(10, 2)  // Para contratos ACL
  valor_base          Decimal? @db.Decimal(10, 2)  // Para contratos valor_fechado
  permite_negociacao   Boolean? @default(false)    // Para contratos valor_fechado
  cliente              Cliente  @relation(fields: [clienteId], references: [id], map: "fk_contrato_cliente")

  @@index([clienteId])
}

model Prestador {
  id                Int                    @id @default(autoincrement())
  nome              String
  cpf               String
  cod_nome          String?
  telefone          String?
  email             String?
  aprovado          Boolean                @default(false)
  tipo_pix          String?
  chave_pix         String?
  cep               String?
  endereco          String?
  bairro            String?
  cidade            String?
  estado            String?
  valor_acionamento Float?
  franquia_horas    String?
  franquia_km       Float?
  valor_hora_adc    Float?
  valor_km_adc      Float?
  latitude          Float?
  longitude         Float?
  criado_em         DateTime               @default(now())
  origem            String?                @default("interno")
  funcoes           FuncaoPrestador[]
  regioes           RegiaoPrestador[]
  veiculos          TipoVeiculoPrestador[]
  modelo_antena     String?

  usuarios UsuarioPrestador[]
  rastreamentos     RastreamentoPrestador[]
  pagamentos_customizados PagamentosPrestadores[]
}

model FuncaoPrestador {
  id          Int       @id @default(autoincrement())
  funcao      String
  prestadorId Int
  prestador   Prestador @relation(fields: [prestadorId], references: [id], map: "fk_funcao_prestador")

  @@index([prestadorId])
}

model RegiaoPrestador {
  id          Int       @id @default(autoincrement())
  regiao      String
  prestadorId Int
  prestador   Prestador @relation(fields: [prestadorId], references: [id], map: "fk_regiao_prestador")

  @@index([prestadorId])
}

model TipoVeiculoPrestador {
  id          Int       @id @default(autoincrement())
  tipo        String
  prestadorId Int
  prestador   Prestador @relation(fields: [prestadorId], references: [id], map: "fk_tipo_veiculo_prestador")

  @@index([prestadorId])
}

model Veiculo {
  id         Int      @id @default(autoincrement())
  placa      String   @unique
  modelo     String?
  marca      String?
  cor        String?
  fabricante String?
  ano        Int?
  createdAt  DateTime @default(now())
}

model Ocorrencia {
  id                  Int       @id @default(autoincrement())
  placa1              String
  placa2              String?
  placa3              String?
  modelo1             String?
  cor1                String?
  cliente             String
  tipo                String
  tipo_veiculo        String?
  coordenadas         String?
  endereco            String?
  bairro              String?
  cidade              String?
  estado              String?
  cpf_condutor        String?
  nome_condutor       String?
  transportadora      String?
  valor_carga         Float?
  notas_fiscais       String?
  os                  String?
  origem_bairro       String?
  origem_cidade       String?
  origem_estado       String?
  prestador           String?
  operador            String?
  inicio              DateTime?
  chegada             DateTime?
  termino             DateTime?
  km                  Float?
  despesas            Float?
  descricao           String?   @db.Text
  resultado           String?
  status              OcorrenciaStatus @default(em_andamento)
  encerrada_em        DateTime?
  criado_em           DateTime  @default(now())
  atualizado_em       DateTime  @updatedAt
  data_acionamento    DateTime?
  km_final            Float?
  km_inicial          Float?
  despesas_detalhadas Json?
  passagem_servico    String?   @db.Text
  planta_origem       String?
  cidade_destino      String?
  km_acl              String?
  operacao            String?   // Campo para operação do cliente Opentech
  conta               String?   // Campo para conta do cliente BRK
  hashRastreamento    String?   @unique
  fotos               Foto[]
  rastreamentos       RastreamentoPrestador[]
  pagamentos_customizados PagamentosPrestadores[]

  @@index([placa1])
  @@index([status])
}

model Foto {
  id           Int        @id @default(autoincrement())
  url          String     @db.Text
  legenda      String     @db.Text
  cropX        Float?     @default(0)
  cropY        Float?     @default(0)
  zoom         Float?     @default(1)
  cropArea     Json?      // Para armazenar a área de crop como JSON
  ocorrenciaId Int
  createdAt    DateTime   @default(now())
  ocorrencia   Ocorrencia @relation(fields: [ocorrenciaId], references: [id], map: "fk_foto_ocorrencia")

  @@index([ocorrenciaId])
}

model Relatorio {
  id              Int      @id @default(autoincrement())
  ocorrenciaId    Int
  cliente         String
  tipo            String
  dataAcionamento DateTime
  caminhoPdf      String
  criadoEm        DateTime @default(now())
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  role         UserRole
  permissions  Json     // Array de strings no formato "ação:recurso"
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relação com pagamentos customizados
  pagamentos_customizados PagamentosPrestadores[]
}

model UsuarioPrestador {
  id             String    @id @default(uuid())
  prestador_id   Int
  email          String   @unique
  senha_hash     String
  ativo          Boolean  @default(true)
  primeiro_acesso Boolean @default(true)
  criado_em      DateTime @default(now())
  atualizado_em  DateTime @updatedAt

  prestador      Prestador @relation(fields: [prestador_id], references: [id])
}

model RastreamentoPrestador {
  id                Int      @id @default(autoincrement())
  prestador_id      Int
  ocorrencia_id     Int?
  latitude          Float
  longitude         Float
  velocidade        Float?   // em km/h
  direcao          Float?   // em graus (0-360)
  altitude          Float?   // em metros
  precisao          Float?   // em metros
  bateria           Int?     // porcentagem (0-100)
  sinal_gps         Int?     // força do sinal GPS (0-100)
  timestamp         DateTime @default(now())
  status            String   @default("ativo") // ativo, inativo, offline
  observacoes       String?  @db.Text
  
  // Relacionamentos
  prestador         Prestador @relation(fields: [prestador_id], references: [id])
  ocorrencia        Ocorrencia? @relation(fields: [ocorrencia_id], references: [id])

  @@index([prestador_id])
  @@index([ocorrencia_id])
  @@index([timestamp])
  @@index([status])
}

// Nova tabela para pagamentos customizados de prestadores
model PagamentosPrestadores {
  id                Int      @id @default(autoincrement())
  ocorrencia_id     Int      // ID da ocorrência
  prestador_id      Int      // ID do prestador
  valor_acionamento Decimal? @db.Decimal(10, 2)  // Valor customizado de acionamento
  valor_hora_adc    Decimal? @db.Decimal(10, 2)  // Valor customizado hora adicional
  valor_km_adc      Decimal? @db.Decimal(10, 2)  // Valor customizado km adicional
  valor_total       Decimal? @db.Decimal(10, 2)  // Valor total customizado
  franquia_horas    String?  // Franquia customizada (ex: "03:00")
  franquia_km       Int?     // Franquia customizada em km
  observacoes       String?  @db.Text // Observações sobre o pagamento customizado
  criado_em         DateTime @default(now())
  atualizado_em     DateTime @updatedAt
  criado_por        String?  // ID do usuário que criou o pagamento customizado
  
  // Relações
  ocorrencia        Ocorrencia @relation(fields: [ocorrencia_id], references: [id], onDelete: Cascade)
  prestador         Prestador  @relation(fields: [prestador_id], references: [id], onDelete: Cascade)
  usuario           User?      @relation(fields: [criado_por], references: [id])

  @@unique([ocorrencia_id, prestador_id]) // Um pagamento customizado por ocorrência/prestador
  @@index([ocorrencia_id])
  @@index([prestador_id])
  @@index([criado_em])
}
