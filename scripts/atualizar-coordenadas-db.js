const { PrismaClient } = require('@prisma/client');

// Fun√ß√£o para normalizar e limpar endere√ßos
function normalizarEndereco(endereco, cidade, estado, bairro) {
  // Limpar endere√ßo
  let enderecoLimpo = endereco
    .replace(/\([^)]*\)/g, '') // Remove par√™nteses e conte√∫do
    .replace(/TESTE.*$/i, '') // Remove "TESTE" e tudo depois
    .replace(/\s+/g, ' ') // Remove espa√ßos m√∫ltiplos
    .trim();

  // Normalizar cidade e estado
  const cidadeNormalizada = cidade.trim();
  const estadoNormalizado = estado.trim();

  // Criar varia√ß√µes do endere√ßo
  const variacoes = [];

  // Varia√ß√£o 1: Endere√ßo completo com bairro
  if (bairro && bairro.trim()) {
    variacoes.push(`${enderecoLimpo}, ${bairro.trim()}, ${cidadeNormalizada}, ${estadoNormalizado}, Brasil`);
  }

  // Varia√ß√£o 2: Endere√ßo sem bairro
  variacoes.push(`${enderecoLimpo}, ${cidadeNormalizada}, ${estadoNormalizado}, Brasil`);

  // Varia√ß√£o 3: Apenas cidade e estado (fallback)
  variacoes.push(`${cidadeNormalizada}, ${estadoNormalizado}, Brasil`);

  // Varia√ß√£o 4: Endere√ßo simplificado (remove n√∫meros e detalhes)
  const enderecoSimplificado = enderecoLimpo
    .replace(/\d+/g, '') // Remove n√∫meros
    .replace(/[A-Za-z]+(?:\s+[A-Za-z]+)*/, (match) => match.trim()) // Pega apenas palavras
    .trim();
  
  if (enderecoSimplificado && enderecoSimplificado !== enderecoLimpo) {
    variacoes.push(`${enderecoSimplificado}, ${cidadeNormalizada}, ${estadoNormalizado}, Brasil`);
  }

  return variacoes;
}

// Fun√ß√£o para obter coordenadas via geocodifica√ß√£o
async function getCoordinates(endereco, cidade, estado, bairro) {
  try {
    // Validar se temos os dados m√≠nimos necess√°rios
    if (!endereco || !cidade || !estado) {
      console.log('‚ö†Ô∏è Dados de endere√ßo incompletos:', { endereco, cidade, estado });
      return { latitude: null, longitude: null };
    }

    // Normalizar e criar varia√ß√µes do endere√ßo
    const variacoes = normalizarEndereco(endereco, cidade, estado, bairro);
    
    console.log('üîç Tentando geocodificar com varia√ß√µes:', variacoes);

    // Tentar cada varia√ß√£o at√© encontrar coordenadas
    for (let i = 0; i < variacoes.length; i++) {
      const enderecoCompleto = variacoes[i];
      console.log(`üìç Tentativa ${i + 1}: ${enderecoCompleto}`);
      
      const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(enderecoCompleto)}&limit=1`;
      
      const response = await fetch(url);
      const data = await response.json();
      
      if (data && data.length > 0) {
        const result = {
          latitude: parseFloat(data[0].lat),
          longitude: parseFloat(data[0].lon)
        };
        console.log(`‚úÖ Coordenadas encontradas na tentativa ${i + 1}:`, result);
        return result;
      }
      
      // Aguardar um pouco entre tentativas para n√£o sobrecarregar a API
      if (i < variacoes.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    console.log('‚ö†Ô∏è Nenhuma coordenada encontrada para nenhuma varia√ß√£o do endere√ßo');
    return { latitude: null, longitude: null };
  } catch (error) {
    console.error('‚ùå Erro ao geocodificar endere√ßo:', error);
    return { latitude: null, longitude: null };
  }
}

async function atualizarCoordenadasPrestadores() {
  try {
    console.log('üîÑ Iniciando atualiza√ß√£o de coordenadas de prestadores...\n');
    
    // Conectar ao banco de dados
    const prisma = new PrismaClient();
    
    // Testar conex√£o
    await prisma.$connect();
    console.log('‚úÖ Conectado ao banco de dados!');
    
    // Buscar todos os prestadores que t√™m endere√ßo mas podem n√£o ter coordenadas
    const prestadores = await prisma.prestador.findMany({
      where: {
        AND: [
          { endereco: { not: null } },
          { cidade: { not: null } },
          { estado: { not: null } }
        ]
      },
      select: {
        id: true,
        nome: true,
        endereco: true,
        cidade: true,
        estado: true,
        bairro: true,
        latitude: true,
        longitude: true
      }
    });

    console.log(`üìä Encontrados ${prestadores.length} prestadores com endere√ßo completo\n`);

    // Filtrar prestadores que precisam de atualiza√ß√£o
    const prestadoresParaAtualizar = prestadores.filter(prestador => {
      const temCoordenadas = prestador.latitude && prestador.longitude && 
                             prestador.latitude !== 0 && prestador.longitude !== 0;
      return !temCoordenadas;
    });

    console.log(`üîç ${prestadoresParaAtualizar.length} prestadores precisam de atualiza√ß√£o de coordenadas\n`);

    if (prestadoresParaAtualizar.length === 0) {
      console.log('‚úÖ Todos os prestadores j√° t√™m coordenadas v√°lidas!');
      return;
    }

    let atualizados = 0;
    let comErro = 0;

    // Atualizar coordenadas
    for (const prestador of prestadoresParaAtualizar) {
      console.log(`\nüîç Processando: ${prestador.nome} (ID: ${prestador.id})`);
      console.log(`üìç Endere√ßo: ${prestador.endereco}, ${prestador.cidade}, ${prestador.estado}`);

      // Obter novas coordenadas
      const coordinates = await getCoordinates(
        prestador.endereco,
        prestador.cidade,
        prestador.estado,
        prestador.bairro
      );

      if (coordinates.latitude && coordinates.longitude) {
        try {
          // Atualizar no banco de dados
          await prisma.prestador.update({
            where: { id: prestador.id },
            data: {
              latitude: coordinates.latitude,
              longitude: coordinates.longitude
            }
          });

          console.log(`‚úÖ Coordenadas atualizadas para: ${coordinates.latitude}, ${coordinates.longitude}`);
          atualizados++;
        } catch (error) {
          console.log(`‚ùå Erro ao atualizar prestador: ${error.message}`);
          comErro++;
        }
      } else {
        console.log(`‚ö†Ô∏è N√£o foi poss√≠vel obter coordenadas para este prestador`);
        comErro++;
      }

      // Aguardar um pouco entre as requisi√ß√µes
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log(`\nüéâ Atualiza√ß√£o conclu√≠da!`);
    console.log(`‚úÖ Prestadores atualizados: ${atualizados}`);
    console.log(`‚ö†Ô∏è Prestadores com erro: ${comErro}`);
    console.log(`üìä Total processado: ${prestadoresParaAtualizar.length}`);

    // Desconectar do banco
    await prisma.$disconnect();

  } catch (error) {
    console.error('‚ùå Erro durante a atualiza√ß√£o:', error);
  }
}

// Executar o script
atualizarCoordenadasPrestadores()
  .then(() => {
    console.log('\n‚úÖ Script conclu√≠do com sucesso!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Erro no script:', error);
    process.exit(1);
  }); 