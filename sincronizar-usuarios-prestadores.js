const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function sincronizarUsuariosPrestadores() {
  try {
    console.log('üîÑ Iniciando sincroniza√ß√£o de usu√°rios prestadores...\n');

    // Buscar todos os prestadores
    const prestadores = await prisma.prestador.findMany({
      include: {
        usuarios: true
      }
    });

    console.log(`üìä Total de prestadores encontrados: ${prestadores.length}`);

    let criados = 0;
    let jaExistem = 0;
    let semEmailOuCPF = 0;

    for (const prestador of prestadores) {
      console.log(`\nüìã Processando: ${prestador.nome} (ID: ${prestador.id})`);
      
      // Verificar se j√° tem usu√°rio
      if (prestador.usuarios && prestador.usuarios.length > 0) {
        console.log(`   ‚úÖ J√° possui usu√°rio: ${prestador.usuarios[0].email}`);
        jaExistem++;
        continue;
      }

      // Verificar se tem email e CPF
      if (!prestador.email || !prestador.cpf) {
        console.log(`   ‚ö†Ô∏è Sem email ou CPF - Email: ${prestador.email || 'N√£o informado'}, CPF: ${prestador.cpf || 'N√£o informado'}`);
        semEmailOuCPF++;
        continue;
      }

      // Criar usu√°rio
      try {
        const cpfLimpo = prestador.cpf.replace(/\D/g, '');
        const senha_hash = await bcrypt.hash(cpfLimpo, 10);

        const novoUsuario = await prisma.usuarioPrestador.create({
          data: {
            prestador_id: prestador.id,
            email: prestador.email,
            senha_hash,
            ativo: true,
            primeiro_acesso: true
          }
        });

        console.log(`   ‚úÖ Usu√°rio criado: ${novoUsuario.email} (Senha: ${cpfLimpo})`);
        criados++;

      } catch (error) {
        console.log(`   ‚ùå Erro ao criar usu√°rio: ${error.message}`);
      }
    }

    console.log('\nüìä Resumo da sincroniza√ß√£o:');
    console.log(`   ‚úÖ Usu√°rios criados: ${criados}`);
    console.log(`   üîÑ J√° existiam: ${jaExistem}`);
    console.log(`   ‚ö†Ô∏è Sem email/CPF: ${semEmailOuCPF}`);
    console.log(`   üìä Total processados: ${prestadores.length}`);

    if (criados > 0) {
      console.log('\nüéâ Sincroniza√ß√£o conclu√≠da com sucesso!');
      console.log('üí° Os prestadores agora podem fazer login no app usando:');
      console.log('   - Email: o email cadastrado');
      console.log('   - Senha: o CPF (apenas n√∫meros)');
    } else {
      console.log('\n‚ÑπÔ∏è Nenhum usu√°rio novo foi criado.');
    }

  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar sincroniza√ß√£o
sincronizarUsuariosPrestadores(); 