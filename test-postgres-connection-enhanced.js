const { Client } = require('pg');

async function testPostgresConnection() {
  const config = {
    host: 'segtrackdb.cyv2oismclv3.us-east-1.rds.amazonaws.com',
    port: 5432,
    user: 'postgres',
    password: '%t%E6G_$',
    database: 'segtrackdb',
    connectionTimeoutMillis: 30000, // Aumentado para 30 segundos
    query_timeout: 30000,
    statement_timeout: 30000,
    idle_timeout: 30000,
    // Configura√ß√µes adicionais para debug
    ssl: false, // Tente false primeiro
    keepAlive: true,
    keepAliveInitialDelayMillis: 10000
  };

  console.log('üîç Teste de Conex√£o PostgreSQL - AWS RDS');
  console.log('==========================================');
  console.log('Configura√ß√µes de conex√£o:', {
    host: config.host,
    port: config.port,
    user: config.user,
    database: config.database,
    connectionTimeoutMillis: config.connectionTimeoutMillis,
    ssl: config.ssl
  });

  const client = new Client(config);

  try {
    console.log('\nüì° Iniciando conex√£o...');
    console.log('‚è±Ô∏è  Timeout configurado: 30 segundos');
    
    const startTime = Date.now();
    await client.connect();
    const endTime = Date.now();
    
    console.log(`‚úÖ Conex√£o bem-sucedida em ${endTime - startTime}ms`);
    
    // Testando uma query simples
    console.log('\nüîç Testando query simples...');
    const result = await client.query('SELECT NOW() as current_time, version() as pg_version');
    console.log('‚úÖ Query executada com sucesso:');
    console.log(`   - Data/Hora atual: ${result.rows[0].current_time}`);
    console.log(`   - Vers√£o PostgreSQL: ${result.rows[0].pg_version.split(' ')[0]}`);
    
    // Testando informa√ß√µes do banco
    console.log('\nüîç Testando informa√ß√µes do banco...');
    const dbInfo = await client.query(`
      SELECT 
        current_database() as database_name,
        current_user as current_user,
        inet_server_addr() as server_address,
        inet_server_port() as server_port
    `);
    console.log('‚úÖ Informa√ß√µes do banco:');
    console.log(`   - Banco: ${dbInfo.rows[0].database_name}`);
    console.log(`   - Usu√°rio: ${dbInfo.rows[0].current_user}`);
    console.log(`   - Endere√ßo do servidor: ${dbInfo.rows[0].server_address}`);
    console.log(`   - Porta do servidor: ${dbInfo.rows[0].server_port}`);
    
    await client.end();
    console.log('\n‚úÖ Conex√£o encerrada com sucesso!');
    console.log('\nüéâ Teste conclu√≠do - Banco PostgreSQL acess√≠vel!');
    
  } catch (error) {
    console.error('\n‚ùå Erro de conex√£o:', error.message);
    console.error('\nüîç Detalhes do erro:');
    console.error(`   - C√≥digo: ${error.code || 'N/A'}`);
    console.error(`   - Tipo: ${error.constructor.name}`);
    console.error(`   - Stack: ${error.stack ? error.stack.split('\n')[1] : 'N/A'}`);
    
    // Sugest√µes baseadas no tipo de erro
    console.log('\nüí° Sugest√µes de solu√ß√£o:');
    
    if (error.code === 'ECONNREFUSED') {
      console.log('   - Verificar se o RDS est√° rodando');
      console.log('   - Verificar se a porta 5432 est√° aberta no Security Group');
      console.log('   - Verificar se o IP de origem est√° liberado');
    } else if (error.code === 'ENOTFOUND') {
      console.log('   - Verificar se o hostname est√° correto');
      console.log('   - Verificar conectividade de rede');
    } else if (error.message.includes('timeout')) {
      console.log('   - Verificar conectividade de rede');
      console.log('   - Verificar se o RDS est√° acess√≠vel');
      console.log('   - Tentar com SSL habilitado');
    } else if (error.message.includes('password authentication failed')) {
      console.log('   - Verificar usu√°rio e senha');
      console.log('   - Verificar se o usu√°rio tem permiss√£o de acesso');
    } else if (error.message.includes('database') && error.message.includes('does not exist')) {
      console.log('   - Verificar se o nome do banco est√° correto');
      console.log('   - Verificar se o banco foi criado');
    }
    
    console.log('\nüîß Para mais diagn√≥sticos, execute:');
    console.log('   - ping segtrackdb.cyv2oismclv3.us-east-1.rds.amazonaws.com');
    console.log('   - telnet segtrackdb.cyv2oismclv3.us-east-1.rds.amazonaws.com 5432');
  }
}

// Fun√ß√£o para testar conectividade b√°sica
async function testBasicConnectivity() {
  console.log('\nüåê Testando conectividade b√°sica...');
  
  try {
    const dns = require('dns').promises;
    const addresses = await dns.resolve4('segtrackdb.cyv2oismclv3.us-east-1.rds.amazonaws.com');
    console.log(`‚úÖ DNS resolvido: ${addresses.join(', ')}`);
  } catch (error) {
    console.log(`‚ùå Erro DNS: ${error.message}`);
  }
}

// Executar testes
async function runTests() {
  await testBasicConnectivity();
  await testPostgresConnection();
}

runTests(); 