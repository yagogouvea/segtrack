const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verificarOcorrencia85() {
  console.log('üîç Verificando ocorr√™ncia ID 85 no banco de dados...\n');

  try {
    // 1. Verificar se a ocorr√™ncia 85 existe
    console.log('1Ô∏è‚É£ Buscando ocorr√™ncia ID 85...');
    const ocorrencia = await prisma.ocorrencia.findUnique({
      where: { id: 85 },
      include: {
        fotos: true
      }
    });

    if (ocorrencia) {
      console.log('‚úÖ Ocorr√™ncia 85 encontrada:');
      console.log(`   ID: ${ocorrencia.id}`);
      console.log(`   Placa: ${ocorrencia.placa1}`);
      console.log(`   Cliente: "${ocorrencia.cliente}"`);
      console.log(`   Tipo: ${ocorrencia.tipo}`);
      console.log(`   Status: ${ocorrencia.status}`);
      console.log(`   Criado em: ${ocorrencia.criado_em}`);
      console.log(`   KM: ${ocorrencia.km}`);
      console.log(`   KM Inicial: ${ocorrencia.km_inicial}`);
      console.log(`   KM Final: ${ocorrencia.km_final}`);
      console.log(`   Fotos: ${ocorrencia.fotos.length}`);
    } else {
      console.log('‚ùå Ocorr√™ncia 85 N√ÉO encontrada!');
    }

    // 2. Verificar todas as ocorr√™ncias para entender a sequ√™ncia
    console.log('\n2Ô∏è‚É£ Verificando todas as ocorr√™ncias...');
    const todasOcorrencias = await prisma.ocorrencia.findMany({
      orderBy: { id: 'asc' },
      select: {
        id: true,
        placa1: true,
        cliente: true,
        status: true,
        criado_em: true
      }
    });

    console.log(`üìä Total de ocorr√™ncias no banco: ${todasOcorrencias.length}`);

    if (todasOcorrencias.length > 0) {
      console.log('üìã IDs das ocorr√™ncias existentes:');
      const ids = todasOcorrencias.map(o => o.id);
      console.log(`   ${ids.join(', ')}`);
      
      // Verificar se h√° gaps na sequ√™ncia
      const maxId = Math.max(...ids);
      const missingIds = [];
      for (let i = 1; i <= maxId; i++) {
        if (!ids.includes(i)) {
          missingIds.push(i);
        }
      }
      
      if (missingIds.length > 0) {
        console.log(`‚ö†Ô∏è IDs ausentes na sequ√™ncia: ${missingIds.join(', ')}`);
      }
    }

    // 3. Verificar ocorr√™ncias pr√≥ximas ao ID 85
    console.log('\n3Ô∏è‚É£ Verificando ocorr√™ncias pr√≥ximas ao ID 85...');
    const ocorrenciasProximas = await prisma.ocorrencia.findMany({
      where: {
        id: {
          gte: 80,
          lte: 90
        }
      },
      orderBy: { id: 'asc' },
      select: {
        id: true,
        placa1: true,
        cliente: true,
        status: true,
        criado_em: true
      }
    });

    console.log(`üìã Ocorr√™ncias entre ID 80-90:`);
    ocorrenciasProximas.forEach(oc => {
      console.log(`   ID ${oc.id}: ${oc.placa1} - ${oc.cliente} (${oc.status})`);
    });

    // 4. Verificar se h√° problemas de conex√£o
    console.log('\n4Ô∏è‚É£ Testando conex√£o com banco...');
    try {
      const testResult = await prisma.$queryRaw`SELECT 1 as test`;
      console.log('‚úÖ Conex√£o com banco OK');
    } catch (error) {
      console.log('‚ùå Erro na conex√£o com banco:', error.message);
    }

  } catch (error) {
    console.error('‚ùå Erro ao verificar ocorr√™ncia:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verificarOcorrencia85(); 